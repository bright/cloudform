import CapacityReservation_ from './capacityReservation';
import CapacityReservationFleet_ from './capacityReservationFleet';
import CarrierGateway_ from './carrierGateway';
import ClientVpnAuthorizationRule_ from './clientVpnAuthorizationRule';
import ClientVpnEndpoint_ from './clientVpnEndpoint';
import ClientVpnRoute_ from './clientVpnRoute';
import ClientVpnTargetNetworkAssociation_ from './clientVpnTargetNetworkAssociation';
import CustomerGateway_ from './customerGateway';
import DHCPOptions_ from './dhcpOptions';
import EC2Fleet_ from './ec2Fleet';
import EIP_ from './eip';
import EIPAssociation_ from './eipAssociation';
import EgressOnlyInternetGateway_ from './egressOnlyInternetGateway';
import EnclaveCertificateIamRoleAssociation_ from './enclaveCertificateIamRoleAssociation';
import FlowLog_ from './flowLog';
import GatewayRouteTableAssociation_ from './gatewayRouteTableAssociation';
import Host_ from './host';
import IPAM_ from './ipam';
import IPAMAllocation_ from './ipamAllocation';
import IPAMPool_ from './ipamPool';
import IPAMPoolCidr_ from './ipamPoolCidr';
import IPAMResourceDiscovery_ from './ipamResourceDiscovery';
import IPAMResourceDiscoveryAssociation_ from './ipamResourceDiscoveryAssociation';
import IPAMScope_ from './ipamScope';
import Instance_ from './instance';
import InstanceConnectEndpoint_ from './instanceConnectEndpoint';
import InternetGateway_ from './internetGateway';
import KeyPair_ from './keyPair';
import LaunchTemplate_ from './launchTemplate';
import LocalGatewayRoute_ from './localGatewayRoute';
import LocalGatewayRouteTable_ from './localGatewayRouteTable';
import LocalGatewayRouteTableVPCAssociation_ from './localGatewayRouteTableVpcAssociation';
import LocalGatewayRouteTableVirtualInterfaceGroupAssociation_ from './localGatewayRouteTableVirtualInterfaceGroupAssociation';
import NatGateway_ from './natGateway';
import NetworkAcl_ from './networkAcl';
import NetworkAclEntry_ from './networkAclEntry';
import NetworkInsightsAccessScope_ from './networkInsightsAccessScope';
import NetworkInsightsAccessScopeAnalysis_ from './networkInsightsAccessScopeAnalysis';
import NetworkInsightsAnalysis_ from './networkInsightsAnalysis';
import NetworkInsightsPath_ from './networkInsightsPath';
import NetworkInterface_ from './networkInterface';
import NetworkInterfaceAttachment_ from './networkInterfaceAttachment';
import NetworkInterfacePermission_ from './networkInterfacePermission';
import NetworkPerformanceMetricSubscription_ from './networkPerformanceMetricSubscription';
import PlacementGroup_ from './placementGroup';
import PrefixList_ from './prefixList';
import Route_ from './route';
import RouteTable_ from './routeTable';
import SecurityGroup_ from './securityGroup';
import SecurityGroupEgress_ from './securityGroupEgress';
import SecurityGroupIngress_ from './securityGroupIngress';
import SpotFleet_ from './spotFleet';
import Subnet_ from './subnet';
import SubnetCidrBlock_ from './subnetCidrBlock';
import SubnetNetworkAclAssociation_ from './subnetNetworkAclAssociation';
import SubnetRouteTableAssociation_ from './subnetRouteTableAssociation';
import TrafficMirrorFilter_ from './trafficMirrorFilter';
import TrafficMirrorFilterRule_ from './trafficMirrorFilterRule';
import TrafficMirrorSession_ from './trafficMirrorSession';
import TrafficMirrorTarget_ from './trafficMirrorTarget';
import TransitGateway_ from './transitGateway';
import TransitGatewayAttachment_ from './transitGatewayAttachment';
import TransitGatewayConnect_ from './transitGatewayConnect';
import TransitGatewayMulticastDomain_ from './transitGatewayMulticastDomain';
import TransitGatewayMulticastDomainAssociation_ from './transitGatewayMulticastDomainAssociation';
import TransitGatewayMulticastGroupMember_ from './transitGatewayMulticastGroupMember';
import TransitGatewayMulticastGroupSource_ from './transitGatewayMulticastGroupSource';
import TransitGatewayPeeringAttachment_ from './transitGatewayPeeringAttachment';
import TransitGatewayRoute_ from './transitGatewayRoute';
import TransitGatewayRouteTable_ from './transitGatewayRouteTable';
import TransitGatewayRouteTableAssociation_ from './transitGatewayRouteTableAssociation';
import TransitGatewayRouteTablePropagation_ from './transitGatewayRouteTablePropagation';
import TransitGatewayVpcAttachment_ from './transitGatewayVpcAttachment';
import VPC_ from './vpc';
import VPCCidrBlock_ from './vpcCidrBlock';
import VPCDHCPOptionsAssociation_ from './vpcdhcpOptionsAssociation';
import VPCEndpoint_ from './vpcEndpoint';
import VPCEndpointConnectionNotification_ from './vpcEndpointConnectionNotification';
import VPCEndpointService_ from './vpcEndpointService';
import VPCEndpointServicePermissions_ from './vpcEndpointServicePermissions';
import VPCGatewayAttachment_ from './vpcGatewayAttachment';
import VPCPeeringConnection_ from './vpcPeeringConnection';
import VPNConnection_ from './vpnConnection';
import VPNConnectionRoute_ from './vpnConnectionRoute';
import VPNGateway_ from './vpnGateway';
import VPNGatewayRoutePropagation_ from './vpnGatewayRoutePropagation';
import VerifiedAccessEndpoint_ from './verifiedAccessEndpoint';
import VerifiedAccessGroup_ from './verifiedAccessGroup';
import VerifiedAccessInstance_ from './verifiedAccessInstance';
import VerifiedAccessTrustProvider_ from './verifiedAccessTrustProvider';
import Volume_ from './volume';
import VolumeAttachment_ from './volumeAttachment';
export declare namespace EC2 {
    const CapacityReservation: typeof CapacityReservation_;
    const CapacityReservationFleet: typeof CapacityReservationFleet_;
    const CarrierGateway: typeof CarrierGateway_;
    const ClientVpnAuthorizationRule: typeof ClientVpnAuthorizationRule_;
    const ClientVpnEndpoint: typeof ClientVpnEndpoint_;
    const ClientVpnRoute: typeof ClientVpnRoute_;
    const ClientVpnTargetNetworkAssociation: typeof ClientVpnTargetNetworkAssociation_;
    const CustomerGateway: typeof CustomerGateway_;
    const DHCPOptions: typeof DHCPOptions_;
    const EC2Fleet: typeof EC2Fleet_;
    const EIP: typeof EIP_;
    const EIPAssociation: typeof EIPAssociation_;
    const EgressOnlyInternetGateway: typeof EgressOnlyInternetGateway_;
    const EnclaveCertificateIamRoleAssociation: typeof EnclaveCertificateIamRoleAssociation_;
    const FlowLog: typeof FlowLog_;
    const GatewayRouteTableAssociation: typeof GatewayRouteTableAssociation_;
    const Host: typeof Host_;
    const IPAM: typeof IPAM_;
    const IPAMAllocation: typeof IPAMAllocation_;
    const IPAMPool: typeof IPAMPool_;
    const IPAMPoolCidr: typeof IPAMPoolCidr_;
    const IPAMResourceDiscovery: typeof IPAMResourceDiscovery_;
    const IPAMResourceDiscoveryAssociation: typeof IPAMResourceDiscoveryAssociation_;
    const IPAMScope: typeof IPAMScope_;
    const Instance: typeof Instance_;
    const InstanceConnectEndpoint: typeof InstanceConnectEndpoint_;
    const InternetGateway: typeof InternetGateway_;
    const KeyPair: typeof KeyPair_;
    const LaunchTemplate: typeof LaunchTemplate_;
    const LocalGatewayRoute: typeof LocalGatewayRoute_;
    const LocalGatewayRouteTable: typeof LocalGatewayRouteTable_;
    const LocalGatewayRouteTableVPCAssociation: typeof LocalGatewayRouteTableVPCAssociation_;
    const LocalGatewayRouteTableVirtualInterfaceGroupAssociation: typeof LocalGatewayRouteTableVirtualInterfaceGroupAssociation_;
    const NatGateway: typeof NatGateway_;
    const NetworkAcl: typeof NetworkAcl_;
    const NetworkAclEntry: typeof NetworkAclEntry_;
    const NetworkInsightsAccessScope: typeof NetworkInsightsAccessScope_;
    const NetworkInsightsAccessScopeAnalysis: typeof NetworkInsightsAccessScopeAnalysis_;
    const NetworkInsightsAnalysis: typeof NetworkInsightsAnalysis_;
    const NetworkInsightsPath: typeof NetworkInsightsPath_;
    const NetworkInterface: typeof NetworkInterface_;
    const NetworkInterfaceAttachment: typeof NetworkInterfaceAttachment_;
    const NetworkInterfacePermission: typeof NetworkInterfacePermission_;
    const NetworkPerformanceMetricSubscription: typeof NetworkPerformanceMetricSubscription_;
    const PlacementGroup: typeof PlacementGroup_;
    const PrefixList: typeof PrefixList_;
    const Route: typeof Route_;
    const RouteTable: typeof RouteTable_;
    const SecurityGroup: typeof SecurityGroup_;
    const SecurityGroupEgress: typeof SecurityGroupEgress_;
    const SecurityGroupIngress: typeof SecurityGroupIngress_;
    const SpotFleet: typeof SpotFleet_;
    const Subnet: typeof Subnet_;
    const SubnetCidrBlock: typeof SubnetCidrBlock_;
    const SubnetNetworkAclAssociation: typeof SubnetNetworkAclAssociation_;
    const SubnetRouteTableAssociation: typeof SubnetRouteTableAssociation_;
    const TrafficMirrorFilter: typeof TrafficMirrorFilter_;
    const TrafficMirrorFilterRule: typeof TrafficMirrorFilterRule_;
    const TrafficMirrorSession: typeof TrafficMirrorSession_;
    const TrafficMirrorTarget: typeof TrafficMirrorTarget_;
    const TransitGateway: typeof TransitGateway_;
    const TransitGatewayAttachment: typeof TransitGatewayAttachment_;
    const TransitGatewayConnect: typeof TransitGatewayConnect_;
    const TransitGatewayMulticastDomain: typeof TransitGatewayMulticastDomain_;
    const TransitGatewayMulticastDomainAssociation: typeof TransitGatewayMulticastDomainAssociation_;
    const TransitGatewayMulticastGroupMember: typeof TransitGatewayMulticastGroupMember_;
    const TransitGatewayMulticastGroupSource: typeof TransitGatewayMulticastGroupSource_;
    const TransitGatewayPeeringAttachment: typeof TransitGatewayPeeringAttachment_;
    const TransitGatewayRoute: typeof TransitGatewayRoute_;
    const TransitGatewayRouteTable: typeof TransitGatewayRouteTable_;
    const TransitGatewayRouteTableAssociation: typeof TransitGatewayRouteTableAssociation_;
    const TransitGatewayRouteTablePropagation: typeof TransitGatewayRouteTablePropagation_;
    const TransitGatewayVpcAttachment: typeof TransitGatewayVpcAttachment_;
    const VPC: typeof VPC_;
    const VPCCidrBlock: typeof VPCCidrBlock_;
    const VPCDHCPOptionsAssociation: typeof VPCDHCPOptionsAssociation_;
    const VPCEndpoint: typeof VPCEndpoint_;
    const VPCEndpointConnectionNotification: typeof VPCEndpointConnectionNotification_;
    const VPCEndpointService: typeof VPCEndpointService_;
    const VPCEndpointServicePermissions: typeof VPCEndpointServicePermissions_;
    const VPCGatewayAttachment: typeof VPCGatewayAttachment_;
    const VPCPeeringConnection: typeof VPCPeeringConnection_;
    const VPNConnection: typeof VPNConnection_;
    const VPNConnectionRoute: typeof VPNConnectionRoute_;
    const VPNGateway: typeof VPNGateway_;
    const VPNGatewayRoutePropagation: typeof VPNGatewayRoutePropagation_;
    const VerifiedAccessEndpoint: typeof VerifiedAccessEndpoint_;
    const VerifiedAccessGroup: typeof VerifiedAccessGroup_;
    const VerifiedAccessInstance: typeof VerifiedAccessInstance_;
    const VerifiedAccessTrustProvider: typeof VerifiedAccessTrustProvider_;
    const Volume: typeof Volume_;
    const VolumeAttachment: typeof VolumeAttachment_;
    type CapacityReservation = CapacityReservation_;
    type CapacityReservationFleet = CapacityReservationFleet_;
    type CarrierGateway = CarrierGateway_;
    type ClientVpnAuthorizationRule = ClientVpnAuthorizationRule_;
    type ClientVpnEndpoint = ClientVpnEndpoint_;
    type ClientVpnRoute = ClientVpnRoute_;
    type ClientVpnTargetNetworkAssociation = ClientVpnTargetNetworkAssociation_;
    type CustomerGateway = CustomerGateway_;
    type DHCPOptions = DHCPOptions_;
    type EC2Fleet = EC2Fleet_;
    type EIP = EIP_;
    type EIPAssociation = EIPAssociation_;
    type EgressOnlyInternetGateway = EgressOnlyInternetGateway_;
    type EnclaveCertificateIamRoleAssociation = EnclaveCertificateIamRoleAssociation_;
    type FlowLog = FlowLog_;
    type GatewayRouteTableAssociation = GatewayRouteTableAssociation_;
    type Host = Host_;
    type IPAM = IPAM_;
    type IPAMAllocation = IPAMAllocation_;
    type IPAMPool = IPAMPool_;
    type IPAMPoolCidr = IPAMPoolCidr_;
    type IPAMResourceDiscovery = IPAMResourceDiscovery_;
    type IPAMResourceDiscoveryAssociation = IPAMResourceDiscoveryAssociation_;
    type IPAMScope = IPAMScope_;
    type Instance = Instance_;
    type InstanceConnectEndpoint = InstanceConnectEndpoint_;
    type InternetGateway = InternetGateway_;
    type KeyPair = KeyPair_;
    type LaunchTemplate = LaunchTemplate_;
    type LocalGatewayRoute = LocalGatewayRoute_;
    type LocalGatewayRouteTable = LocalGatewayRouteTable_;
    type LocalGatewayRouteTableVPCAssociation = LocalGatewayRouteTableVPCAssociation_;
    type LocalGatewayRouteTableVirtualInterfaceGroupAssociation = LocalGatewayRouteTableVirtualInterfaceGroupAssociation_;
    type NatGateway = NatGateway_;
    type NetworkAcl = NetworkAcl_;
    type NetworkAclEntry = NetworkAclEntry_;
    type NetworkInsightsAccessScope = NetworkInsightsAccessScope_;
    type NetworkInsightsAccessScopeAnalysis = NetworkInsightsAccessScopeAnalysis_;
    type NetworkInsightsAnalysis = NetworkInsightsAnalysis_;
    type NetworkInsightsPath = NetworkInsightsPath_;
    type NetworkInterface = NetworkInterface_;
    type NetworkInterfaceAttachment = NetworkInterfaceAttachment_;
    type NetworkInterfacePermission = NetworkInterfacePermission_;
    type NetworkPerformanceMetricSubscription = NetworkPerformanceMetricSubscription_;
    type PlacementGroup = PlacementGroup_;
    type PrefixList = PrefixList_;
    type Route = Route_;
    type RouteTable = RouteTable_;
    type SecurityGroup = SecurityGroup_;
    type SecurityGroupEgress = SecurityGroupEgress_;
    type SecurityGroupIngress = SecurityGroupIngress_;
    type SpotFleet = SpotFleet_;
    type Subnet = Subnet_;
    type SubnetCidrBlock = SubnetCidrBlock_;
    type SubnetNetworkAclAssociation = SubnetNetworkAclAssociation_;
    type SubnetRouteTableAssociation = SubnetRouteTableAssociation_;
    type TrafficMirrorFilter = TrafficMirrorFilter_;
    type TrafficMirrorFilterRule = TrafficMirrorFilterRule_;
    type TrafficMirrorSession = TrafficMirrorSession_;
    type TrafficMirrorTarget = TrafficMirrorTarget_;
    type TransitGateway = TransitGateway_;
    type TransitGatewayAttachment = TransitGatewayAttachment_;
    type TransitGatewayConnect = TransitGatewayConnect_;
    type TransitGatewayMulticastDomain = TransitGatewayMulticastDomain_;
    type TransitGatewayMulticastDomainAssociation = TransitGatewayMulticastDomainAssociation_;
    type TransitGatewayMulticastGroupMember = TransitGatewayMulticastGroupMember_;
    type TransitGatewayMulticastGroupSource = TransitGatewayMulticastGroupSource_;
    type TransitGatewayPeeringAttachment = TransitGatewayPeeringAttachment_;
    type TransitGatewayRoute = TransitGatewayRoute_;
    type TransitGatewayRouteTable = TransitGatewayRouteTable_;
    type TransitGatewayRouteTableAssociation = TransitGatewayRouteTableAssociation_;
    type TransitGatewayRouteTablePropagation = TransitGatewayRouteTablePropagation_;
    type TransitGatewayVpcAttachment = TransitGatewayVpcAttachment_;
    type VPC = VPC_;
    type VPCCidrBlock = VPCCidrBlock_;
    type VPCDHCPOptionsAssociation = VPCDHCPOptionsAssociation_;
    type VPCEndpoint = VPCEndpoint_;
    type VPCEndpointConnectionNotification = VPCEndpointConnectionNotification_;
    type VPCEndpointService = VPCEndpointService_;
    type VPCEndpointServicePermissions = VPCEndpointServicePermissions_;
    type VPCGatewayAttachment = VPCGatewayAttachment_;
    type VPCPeeringConnection = VPCPeeringConnection_;
    type VPNConnection = VPNConnection_;
    type VPNConnectionRoute = VPNConnectionRoute_;
    type VPNGateway = VPNGateway_;
    type VPNGatewayRoutePropagation = VPNGatewayRoutePropagation_;
    type VerifiedAccessEndpoint = VerifiedAccessEndpoint_;
    type VerifiedAccessGroup = VerifiedAccessGroup_;
    type VerifiedAccessInstance = VerifiedAccessInstance_;
    type VerifiedAccessTrustProvider = VerifiedAccessTrustProvider_;
    type Volume = Volume_;
    type VolumeAttachment = VolumeAttachment_;
}
