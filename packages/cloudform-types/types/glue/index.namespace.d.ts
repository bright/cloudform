import Classifier_ from './classifier';
import Connection_ from './connection';
import Crawler_ from './crawler';
import DataCatalogEncryptionSettings_ from './dataCatalogEncryptionSettings';
import DataQualityRuleset_ from './dataQualityRuleset';
import Database_ from './database';
import DevEndpoint_ from './devEndpoint';
import Job_ from './job';
import MLTransform_ from './mlTransform';
import Partition_ from './partition';
import Registry_ from './registry';
import Schema_ from './schema';
import SchemaVersion_ from './schemaVersion';
import SchemaVersionMetadata_ from './schemaVersionMetadata';
import SecurityConfiguration_ from './securityConfiguration';
import Table_ from './table';
import Trigger_ from './trigger';
import Workflow_ from './workflow';
import CustomEntityType_ from './customEntityType';
export declare namespace Glue {
    const Classifier: typeof Classifier_;
    const Connection: typeof Connection_;
    const Crawler: typeof Crawler_;
    const DataCatalogEncryptionSettings: typeof DataCatalogEncryptionSettings_;
    const DataQualityRuleset: typeof DataQualityRuleset_;
    const Database: typeof Database_;
    const DevEndpoint: typeof DevEndpoint_;
    const Job: typeof Job_;
    const MLTransform: typeof MLTransform_;
    const Partition: typeof Partition_;
    const Registry: typeof Registry_;
    const Schema: typeof Schema_;
    const SchemaVersion: typeof SchemaVersion_;
    const SchemaVersionMetadata: typeof SchemaVersionMetadata_;
    const SecurityConfiguration: typeof SecurityConfiguration_;
    const Table: typeof Table_;
    const Trigger: typeof Trigger_;
    const Workflow: typeof Workflow_;
    const CustomEntityType: typeof CustomEntityType_;
    type Classifier = Classifier_;
    type Connection = Connection_;
    type Crawler = Crawler_;
    type DataCatalogEncryptionSettings = DataCatalogEncryptionSettings_;
    type DataQualityRuleset = DataQualityRuleset_;
    type Database = Database_;
    type DevEndpoint = DevEndpoint_;
    type Job = Job_;
    type MLTransform = MLTransform_;
    type Partition = Partition_;
    type Registry = Registry_;
    type Schema = Schema_;
    type SchemaVersion = SchemaVersion_;
    type SchemaVersionMetadata = SchemaVersionMetadata_;
    type SecurityConfiguration = SecurityConfiguration_;
    type Table = Table_;
    type Trigger = Trigger_;
    type Workflow = Workflow_;
    type CustomEntityType = CustomEntityType_;
}
